{"version":3,"sources":["components/repos.js","App.js","reportWebVitals.js","index.js"],"names":["Repos","useState","page","setPage","repos","setRepos","useEffect","fetch","then","res","json","items","concat","window","onscroll","innerHeight","document","documentElement","scrollTop","offsetHeight","map","repo","index","className","width","height","src","owner","avatar_url","alt","name","description","stargazers_count","open_issues","date1","Date","date2","updated_at","timeSpace","getTime","postTime","Math","round","SetDays","login","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kQA+DeA,MA5Df,WAEI,MAA2BC,mBAAS,GAApC,mBAAQC,EAAR,KAAeC,EAAf,KACA,EAA6BF,mBAAS,IAAtC,mBAAQG,EAAR,KAAgBC,EAAhB,KAiBA,OAfAC,qBAAU,WACNC,MAAM,iHAAD,OACiCL,IAAQM,MAClC,SAAAC,GAAG,OAAIA,EAAIC,UAASF,MAChB,SAAAC,GAAG,OAAIJ,EAAUI,EAAIE,MAAQP,EAAMQ,OAAOH,EAAIE,OAASP,MAG3DS,OAAOC,SAAW,WACfD,OAAOE,YAAcC,SAASC,gBAAgBC,YACvCF,SAASC,gBAAgBE,cACzBhB,EAAQD,EAAK,MAGrC,CAACA,IAGC,8BAEUE,EAAMgB,KAAK,SAAEC,EAAOC,GAed,OACC,sBAAiBC,UAAU,OAA3B,UACI,qBAAKA,UAAU,WAAf,SACK,qBAAKC,MAAM,QAAQC,OAAO,QAAQC,IAAKL,EAAKM,MAAMC,WAAaC,IAAI,aAExE,sBAAKN,UAAU,UAAf,UACG,qBAAIA,UAAU,WAAd,cAA4BF,EAAKS,KAAjC,OACA,oBAAGP,UAAU,kBAAb,cAAkCF,EAAKU,YAAvC,OACA,uBAAMR,UAAU,QAAhB,qBAAiCF,EAAKW,iBAAtC,OACA,uBAAMT,UAAU,SAAhB,sBAAmCF,EAAKY,YAAxC,OACA,oBAAGV,UAAU,WAAb,uBAvBY,WACZ,IAAMW,EAAQ,IAAIC,KACZC,EAAQ,IAAID,KAAKd,EAAKgB,YACtBC,EAAaJ,EAAMK,UAAYH,EAAMG,UAErCC,EAAWC,KAAKC,MAAMJ,EADb,OAGX,OAAGE,EAAW,GACPC,KAAKC,MAAMF,EAAW,IAAM,aAE/BA,EAcJG,GADJ,OACmBtB,EAAKM,MAAMiB,cAV3BtB,S,MC/BpBuB,MARf,WACE,OACE,qBAAKtB,UAAU,MAAf,SACG,cAAC,EAAD,OCMQuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASyC,eAAe,SAM1BX,M","file":"static/js/main.25f0bbf6.chunk.js","sourcesContent":["import React , {useState , useEffect} from 'react'\r\nimport \"./repos.css\"\r\n\r\nfunction Repos() {\r\n\r\n    const [ page , setPage ] = useState(1)\r\n    const [ repos , setRepos ] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetch(`https://api.github.com/search/repositories?q=created:>2017-10-22\r\n                &sort=stars&order=desc&page=${page}`).then(\r\n                    res => res.json() ).then(\r\n                        res => setRepos( res.items ? repos.concat(res.items) : repos )\r\n                    )\r\n\r\n                    window.onscroll = function (){\r\n                    if(window.innerHeight + document.documentElement.scrollTop\r\n                          === document.documentElement.offsetHeight){\r\n                              setPage(page+1)\r\n                          }\r\n                    }\r\n    },[page])\r\n\r\n    return (\r\n        <div>\r\n                {\r\n                  repos.map( ( repo , index) => {\r\n\r\n                            const SetDays = () => {\r\n                                const date1 = new Date();\r\n                                const date2 = new Date(repo.updated_at);\r\n                                const timeSpace  = date1.getTime() - date2.getTime()\r\n                                const oneDay = 1000 * 60 * 60 * 24 ; \r\n                                const postTime = Math.round(timeSpace / oneDay)\r\n\r\n                                    if(postTime > 31){\r\n                                    return Math.round(postTime / 31) + \" month ago\"\r\n                                    }\r\n                                 return postTime\r\n                            }\r\n\r\n                        return (\r\n                         <div key={index} className=\"repo\">\r\n                             <div className=\"imageDiv\">\r\n                                  <img width=\"150px\" height=\"150px\" src={repo.owner.avatar_url } alt=\"avatar\" />\r\n                             </div>\r\n                             <div className=\"details\">\r\n                                <h3 className=\"repoName\"> { repo.name } </h3>\r\n                                <p className=\"repoDescription\"> { repo.description } </p>\r\n                                <span className=\"stars\"> Stars: {repo.stargazers_count} </span>\r\n                                <span className=\"issues\"> Issues: {repo.open_issues} </span>\r\n                                <p className=\"userInfo\"> submited {\r\n                                    SetDays()} by {repo.owner.login}</p>\r\n                              </div>\r\n                        </div>\r\n                    )\r\n                } )\r\n                }\r\n            </div>\r\n             \r\n        )\r\n    }\r\n\r\nexport default Repos\r\n","import Repos from './components/repos'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Repos/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}